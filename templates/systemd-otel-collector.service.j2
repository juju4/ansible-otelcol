{{ ansible_managed | comment }}

[Unit]
Description=OpenTelemetry Collector
After=network.target network-online.target

[Service]
ExecStart=/usr/local/bin/otelcol-contrib --config /etc/otel-config.yaml
Restart=always
RestartSec=10
User={{ otelcol_user }}
Group={{ otelcol_user }}

# Reduce Attack Surface
# Exposure level 2.2
NoNewPrivileges=yes
PrivateTmp=true
ProtectHome=yes
ProtectSystem=yes
# ProtectSystem=strict
{% if (ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int >= 21) or
      (ansible_distribution == 'Debian' and ansible_distribution_major_version|int >= 11)
%}
#  Error: failed to build pipelines: failed to create "memory_limiter" processor, in pipeline "logs": failed to get total memory, use fixed memory settings (limit_mib): open /proc/self/mountinfo: permission denied
# ProtectProc=noaccess
ProtectProc=invisible
{% endif %}

PrivateDevices=yes
DeviceAllow=

# PrivateUsers=yes

UMask=077

# InaccessiblePaths=/proc

ProtectKernelTunables=true
ProtectKernelModules=yes
{% if (ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int >= 20) or
      (ansible_distribution == 'Debian' and ansible_distribution_major_version|int >= 11) or
      (ansible_os_family == 'RedHat' and ansible_distribution_major_version|int > 8 )
%}
ProtectKernelLogs=yes
ProtectHostname=yes
ProtectClock=yes
{% endif %}

ProtectControlGroups=true
LockPersonality=true
RestrictRealtime=true
RestrictNamespaces=yes
# RestrictNamespaces=~CLONE_NEWCGROUP CLONE_NEWIPC CLONE_NEWNET CLONE_NEWPID
RestrictSUIDSGID=yes
MemoryDenyWriteExecute=yes

# PrivateNetwork=yes
RestrictAddressFamilies=AF_INET AF_INET6
RestrictAddressFamilies=~AF_UNIX

IPAccounting=yes
{% if otelcol_webproxy_ip is defined and otelcol_webproxy_ip | string %}
# upstream communication can be limited to proxy
# but must be able to receive logs too...
# IPAddressAllow={{ otelcol_webproxy_ip }}
{% endif %}
IPAddressAllow=localhost link-local multicast 10.0.0.0/8 192.168.0.0/16

CapabilityBoundingSet=~CAP_AUDIT_CONTROL CAP_AUDIT_READ CAP_DAC_READ_SEARCH
CapabilityBoundingSet=~CAP_SYS_RAWIO
CapabilityBoundingSet=~CAP_SYS_PTRACE
CapabilityBoundingSet=~CAP_DAC_* CAP_FOWNER CAP_IPC_OWNER
CapabilityBoundingSet=~CAP_NET_ADMIN
CapabilityBoundingSet=~CAP_KILL
CapabilityBoundingSet=~CAP_NET_BIND_SERVICE CAP_NET_BROADCAST
CapabilityBoundingSet=~CAP_SYS_NICE CAP_SYS_RESOURCE
CapabilityBoundingSet=~CAP_SYS_BOOT
CapabilityBoundingSet=~CAP_LINUX_IMMUTABLE
CapabilityBoundingSet=~CAP_SYS_CHROOT
CapabilityBoundingSet=~CAP_BLOCK_SUSPEND
CapabilityBoundingSet=~CAP_LEASE
CapabilityBoundingSet=~CAP_SYS_PACCT
CapabilityBoundingSet=~CAP_SYS_TTY_CONFIG
CapabilityBoundingSet=~CAP_SYS_ADMIN
CapabilityBoundingSet=~CAP_SETUID CAP_SETGID
CapabilityBoundingSet=~CAP_SETPCAP
# warn        batchprocessor@v0.111.0/batch_processor.go:279        Sender failed        {"kind": "processor", "name": "batch", "pipeline": "logs/test", "error": "chown /tmp/otel-debug.log: operation not permitted"}
# CapabilityBoundingSet=~CAP_CHOWN
CapabilityBoundingSet=~CAP_FSETID CAP_SETFCAP
CapabilityBoundingSet=~CAP_NET_RAW
CapabilityBoundingSet=~CAP_IPC_LOCK

{% if not (ansible_virtualization_type is defined and
          ansible_virtualization_type == "docker"
        )
%}
SystemCallFilter=@system-service
SystemCallFilter=~@debug @mount @cpu-emulation @obsolete @privileged @resources @reboot @swap @raw-io @module
# SystemCallFilter=~@debug @mount @cpu-emulation @obsolete @resources @reboot @swap @raw-io @module
# When system call is disallowed, return error code instead of killing process
SystemCallErrorNumber=EPERM
{% endif %}
SystemCallArchitectures=native

{% if otelcol_cgroups_restriction_enable | bool %}
CPUWeight={{ otelcol_cgroups_cpushares | default('1024') }}
CPUQuota={{ otelcol_cgroups_cpuquota | default('80%') }}
MemoryMax={{ otelcol_cgroups_memorylimit | default('4G') }}
{% endif %}

[Install]
WantedBy=multi-user.target
